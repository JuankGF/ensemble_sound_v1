// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    accounts      Account[]
    sessions      Session[]
    testimonials  Testimonial[]
    media         Media?        @relation(fields: [avatar], references: [id])
    avatar        String?       @unique
    phone         String?
    role          Role          @default(USER)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Service {
    id             String      @id @default(cuid())
    name           String      @unique
    desciption     String
    estimatedPrice Float       @default(0) @map("estimated_price")
    type           ServiceType
    media          Media       @relation(fields: [mediaId], references: [id])
    mediaId        String      @unique @map("media_id")

    @@index([name])
}

model Testimonial {
    id       String @id @default(cuid())
    author   User   @relation(fields: [authorId], references: [id])
    authorId String @map("author_id")
    text     String
    rating   Float  @default(5)
}

model Event {
    id             String   @id @default(cuid())
    name           String
    location       String
    date           DateTime
    address        String?
    description    String
    media          Media?   @relation(fields: [mediaId], references: [id])
    mediaId        String?  @unique @map("media_id")
    type           String
    isPublic       Boolean  @default(false) @map("is_public")
    isSynchronized Boolean  @default(false) @map("is_synchronized")

    @@index([name])
}

model Equipment {
    id                String        @id @default(cuid())
    media             Media?        @relation(fields: [mediaId], references: [id])
    mediaId           String?       @unique @map("media_id")
    name              String        @unique
    description       String
    dimension         String?
    weight            Float?
    quantity          Float         @default(1)
    type              EquipmentType
    createdAt         DateTime?     @default(now()) @map("created_at")
    updatedAt         DateTime?     @updatedAt @map("updated_at")
    isRentalAvailable Boolean       @default(true) @map("is_rental_available")
    nextRentalDate    DateTime?     @map("next_rental_date")

    @@index([name])
}

model Media {
    id        String     @id @default(cuid())
    name      String
    path      String     @unique
    extension String
    createdAt DateTime   @default(now()) @map("created_at")
    updatedAt DateTime?  @updatedAt @map("updated_at")
    equipment Equipment?
    event     Event?
    service   Service?
    user      User?

    @@index([path])
}

enum Role {
    ADMIN
    USER
}

enum ServiceType {
    LIVE_EVENT
    RENTAL
    STUDIO
    SOUND_TEST
}

enum EquipmentType {
    MIXERS
    MICROPHONES
    SUB
    SPEAKERS
    MONITORS
    STAGE_BOXES
    DIRECT_INPUT
    INSTRUMENTS
    TOOLS
}
